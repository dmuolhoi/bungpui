name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java for Android build
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          VITE_PUBLIC_SUPABASE_URL: ${{ secrets.VITE_PUBLIC_SUPABASE_URL }}
          VITE_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.VITE_PUBLIC_SUPABASE_ANON_KEY }}
          VITE_GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Setup Android platform
        run: node scripts/setup-android.cjs

      - name: Sync web app with Capacitor
        run: npx cap sync android

      - name: Debug Capacitor Android folder
        run: |
          echo "Listing capacitor-android directory contents:"
          ls -l android/capacitor-android || echo "Directory android/capacitor-android not found"

          if [ -f android/capacitor-android/build.gradle ]; then
            echo "Found build.gradle file"
          else
            echo "build.gradle file not found in android/capacitor-android"
          fi

          ROOT_BUILD_GRADLE="android/build.gradle"
          if [ -f "$ROOT_BUILD_GRADLE" ]; then
            echo "Found root build.gradle"
          else
            echo "Root build.gradle file not found"
          fi

      - name: Fix Android root build.gradle
        run: |
          ROOT_BUILD_GRADLE="android/build.gradle"
          if [ -f "$ROOT_BUILD_GRADLE" ]; then
            echo "Fixing root build.gradle file"
            cat > "$ROOT_BUILD_GRADLE" <<'EOL'
            // Top-level build file where you can add configuration options common to all sub-projects/modules.
            buildscript {
                repositories {
                    google()
                    mavenCentral()
                }
                dependencies {
                    classpath 'com.android.tools.build:gradle:7.4.2'
                    classpath 'com.google.gms:google-services:4.3.15'
                    // NOTE: Do not place your application dependencies here; they belong
                    // in the individual module build.gradle files
                }
            }

            allprojects {
                repositories {
                    google()
                    mavenCentral()
                }
            }

            task clean(type: Delete) {
                delete rootProject.buildDir
            }
EOL
          else
            echo "Root build.gradle file not found"
          fi

      - name: Patch All Android Java/Kotlin Versions
        run: |
          # Find all build.gradle files and update Java compatibility settings
          find android -name "build.gradle" -type f | while read -r file; do
            echo "Patching Java version in $file"
            if grep -q "sourceCompatibility" "$file"; then
              sed -i 's/sourceCompatibility JavaVersion\.[A-Z0-9_]*/sourceCompatibility JavaVersion.VERSION_17/' "$file"
            elif grep -q "compileOptions" "$file"; then
              echo "File already has compileOptions but no sourceCompatibility"
            else 
              echo -e '\nandroid {\n  compileOptions {\n    sourceCompatibility JavaVersion.VERSION_17\n    targetCompatibility JavaVersion.VERSION_17\n  }\n}' >> "$file"
            fi

            if grep -q "targetCompatibility" "$file"; then
              sed -i 's/targetCompatibility JavaVersion\.[A-Z0-9_]*/targetCompatibility JavaVersion.VERSION_17/' "$file"
            fi
          done

          # Also update gradle.properties if needed
          GRADLE_PROPS="android/gradle.properties"
          if [ -f "$GRADLE_PROPS" ]; then
            echo "org.gradle.java.home=/usr/lib/jvm/temurin-17-jdk-amd64" >> "$GRADLE_PROPS"
          fi

      - name: Show Android Gradle Version
        run: |
          cd android
          ./gradlew --version

      - name: Build Android APK
        run: cd android && ./gradlew assembleDebug

      - name: Copy APK to dist directory
        run: |
          mkdir -p dist
          cp android/app/build/outputs/apk/debug/app-debug.apk dist/bungpui.apk

      - name: Prepare SPA fallback for GitHub Pages routing
        run: cp dist/index.html dist/404.html

      - name: Disable Jekyll processing
        run: touch dist/.nojekyll

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: dist
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: bungpui-android-app
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 14

      - name: Create Release for Tagged Commits
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: android/app/build/outputs/apk/debug/app-debug.apk
          name: Bungpui AI ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Build-Only Release
        if: "!startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'"
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ github.run_number }}
          name: Automated Build ${{ github.run_number }}
          prerelease: true
          files: android/app/build/outputs/apk/debug/app-debug.apk
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display deployment URL
        run: echo "ðŸš€ Deployed to https://dmuolhoi.github.io/bungpui/"
